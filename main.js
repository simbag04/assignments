(()=>{"use strict";var n={28:(n,e,t)=>{t.d(e,{Z:()=>l});var r=t(537),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([n.id,":root\n{\n    --header-background: #1565c0; \n    --darker-background: #bbdefb;\n    --middle-background: #FFFFFF;\n    --light-background: #e3f2fd;\n\n    /* PREV COLORS: \n    --header-background: #595959;\n    --middle-background: #cccccc;\n    --darker-background: #ced4da;\n    --light-background: #e9ecef;\n    */\n}\n\nhtml {\n    height: fit-content;\n    min-height: 100vh;\n    width: 100%;\n}\n\n/* BODY LAYOUT FORMATTING*/\nbody\n{\n    display: grid;\n    grid-template-rows: auto 1fr;\n    grid-template-columns: 1fr;\n    align-items: stretch;\n    justify-content: stretch;\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n    height: 100%;\n    width: 100%;\n}\n\n.main {\n    position: relative;\n    width: 100%;\n}\n\n\n/* HEADER FORMATTING*/\n.header\n{\n    grid-column: 1 / 3;\n    font-size: 40px;\n    padding: 20px 0px;\n    background-color: var(--header-background);\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n}\n\n/* TITLES */\n.title\n{\n    font-size: 24px;\n    text-align: center;\n    padding: 10px;\n    font-weight: bold;\n}\n\n.popup-title\n{\n    display: flex;\n    padding: 0px 0px;\n    align-items: center;\n    justify-content: center;\n}\n\n.small-title\n{\n    font-size: 20px;\n}\n\n.matrix-popup-close-button \n{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n/* buttons styling */\n.big-button\n{\n    padding: 10px;\n    font-size: 16px;\n    border: 2px solid black;\n    color: black;\n    background-color: var(--darker-background);\n    font-weight: bold;\n    border-radius: 5px;\n    width: 100%;\n}\n\n.small-button\n{\n    font-size: 14px;\n    color: black;\n    border-radius: 3px;\n    padding: 3px 5px;\n    font-weight: bold;\n}\n\n.popup-button {\n    padding: 4px 10px;\n}\n\n.buttons {\n    display: flex;\n    gap: 10px;\n}\nbutton:hover, .small-button:hover\n{\n    background-color: var(--header-background);\n    border: 2px solid var(--header-background);\n    color: white;\n}\n\n/* svgs styling */\nsvg\n{\n    width: 1.2rem;\n    height: auto;\n}\n\n.svg\n{\n    display: flex;\n    align-items: center;\n}\n\nsvg:hover\n{\n    fill: red;\n}\n\n/* MATRIX POPUP */\n.popup\n{\n    padding: 20px;\n    background-color: var(--middle-background);\n    display: none;\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n}\n\n.matrix-table\n{\n    border-collapse: collapse;\n    table-layout: fixed;\n    border: 2px solid var(--header-background);\n}\n\n.matrix-table input\n{\n    font-size: 12px;\n}\n\n.matrix-table th\n{\n    border: 2px solid var(--header-background);\n    color: white;\n    background-color: var(--header-background);\n    font-size: 12px;\n    margin: 0;\n    padding: 0;\n    height: 1.5em;\n}\n\n.matrix-table td\n{\n    margin: 0;\n    padding: 0;\n}\n\n.matrix-table input[type='number']\n{\n    width: 1.2em;\n    height: 1.2em;\n    text-align: center;\n}\n\n.td-div\n{\n    display: flex;\n}\n\n/* coloring for matrix cells */\n.dark\n{\n    background-color: var(--darker-background);\n    border: 2px solid var(--darker-background);\n}\n\n.light {\n    background-color: var(--light-background);\n    border: 2px solid var(--light-background);\n}\n\n.green\n{\n    background-color: green;\n    font-weight: bold;\n    color: white;\n    border: 2px solid green;\n}\n\n.sub-member-input-div, .sub-text-assignments-div\n{\n    padding: 20px;\n}\n\n/* Member Input Styling*/\n.member-input\n{\n    display: flex;\n    gap: 40px;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n}\n\n.member-input-div\n{\n    background-color: var(--middle-background);\n    width: 100%;\n}\n\n.member-info-input\n{\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n}\n\ninput[type=\"checkbox\"]:checked {\n    accent-color: var(--header-background);\n}\n\n/* war size/buttons styling */\n.war-size-input\n{\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    align-self: start;\n}\n\n#war-size-dropdown\n{\n    padding: 10px;\n    font-size: 16px;\n    font-weight: bold;\n    text-align: center;\n    border: 2px solid black;\n    background-color: var(--darker-background);\n    border-radius: 5px;\n}\n\n#war-size-dropdown option\n{\n    padding: 0px;\n}\n\n.member-input-buttons\n{\n    align-self: start;\n    display: flex;\n    gap: 10px;\n    flex-direction: column;\n    align-items: center;\n}\n\n#total-stars\n{\n    min-width: 100%;\n    width: 0;\n}\n\n/* Individual capabilities styling */\n.member-capability-popup\n{\n    display: none;\n    flex-direction: column;\n    align-items: center;\n}\n/* table layout styling */\n.standard-table\n{\n    padding: 10px;\n    border-collapse: collapse;\n    border: 2px solid var(--header-background);\n}\n\n.standard-table td\n{\n    padding: 5px 3px;\n}\n\n.standard-table .hidden-td \n{\n    padding: 0px;\n}\n\n.standard-table th\n{\n    font-size: 16px;\n    padding: 8px 5px;\n}\n\n/* set size of input fields */\n.standard-table input\n{\n    font-size: 16px;\n    text-align: center;\n}\n\n.member-info-input .th\n{\n    width: 2em;\n}\n\n.name-input\n{\n    width: 6em;\n}\n\n/* right and left padding for each row */\ntd.first-td\n{\n    padding-left: 8px;\n    padding-right: 8px;\n}\n\n\n.last-td\n{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.standard-table .last-th \n{\n    padding-right: 10px;\n    padding-left: 10px;\n}\n\n\n.first-td\n{\n    margin-left: 5px;\n    margin-right: 5px;\n    border: none;\n    text-align: center;\n    width: 2em;\n}\n\n/* shading of rows */\n.odd-row th\n{\n    background-color: var(--header-background);\n    color: white;\n}\n\n.odd-row td, .odd-row .pos, .odd-row input\n{\n    background-color: var(--light-background);\n    border: none;\n}\n\n.odd-row button\n{\n    background-color: var(--light-background);\n    border: 2px solid var(--light-background);\n}\n\n.even-row td, .even-row .pos, .even-row input\n{\n    background-color: var(--darker-background);\n    border: none;\n}\n\n.even-row button\n{\n    background-color: var(--darker-background);\n    border: 2px solid var(--darker-background);\n}\n\n.header-row .cap-assignment-header\n{\n    padding-left: 5px;\n    padding-right: 5px;\n}\n\n.assignment-td input\n{\n    font-weight: bold;\n    text-align: center;\n}\n\n/* general input styling */\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:[":root\n{\n    --header-background: #1565c0; \n    --darker-background: #bbdefb;\n    --middle-background: #FFFFFF;\n    --light-background: #e3f2fd;\n\n    /* PREV COLORS: \n    --header-background: #595959;\n    --middle-background: #cccccc;\n    --darker-background: #ced4da;\n    --light-background: #e9ecef;\n    */\n}\n\nhtml {\n    height: fit-content;\n    min-height: 100vh;\n    width: 100%;\n}\n\n/* BODY LAYOUT FORMATTING*/\nbody\n{\n    display: grid;\n    grid-template-rows: auto 1fr;\n    grid-template-columns: 1fr;\n    align-items: stretch;\n    justify-content: stretch;\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n    height: 100%;\n    width: 100%;\n}\n\n.main {\n    position: relative;\n    width: 100%;\n}\n\n\n/* HEADER FORMATTING*/\n.header\n{\n    grid-column: 1 / 3;\n    font-size: 40px;\n    padding: 20px 0px;\n    background-color: var(--header-background);\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n}\n\n/* TITLES */\n.title\n{\n    font-size: 24px;\n    text-align: center;\n    padding: 10px;\n    font-weight: bold;\n}\n\n.popup-title\n{\n    display: flex;\n    padding: 0px 0px;\n    align-items: center;\n    justify-content: center;\n}\n\n.small-title\n{\n    font-size: 20px;\n}\n\n.matrix-popup-close-button \n{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n/* buttons styling */\n.big-button\n{\n    padding: 10px;\n    font-size: 16px;\n    border: 2px solid black;\n    color: black;\n    background-color: var(--darker-background);\n    font-weight: bold;\n    border-radius: 5px;\n    width: 100%;\n}\n\n.small-button\n{\n    font-size: 14px;\n    color: black;\n    border-radius: 3px;\n    padding: 3px 5px;\n    font-weight: bold;\n}\n\n.popup-button {\n    padding: 4px 10px;\n}\n\n.buttons {\n    display: flex;\n    gap: 10px;\n}\nbutton:hover, .small-button:hover\n{\n    background-color: var(--header-background);\n    border: 2px solid var(--header-background);\n    color: white;\n}\n\n/* svgs styling */\nsvg\n{\n    width: 1.2rem;\n    height: auto;\n}\n\n.svg\n{\n    display: flex;\n    align-items: center;\n}\n\nsvg:hover\n{\n    fill: red;\n}\n\n/* MATRIX POPUP */\n.popup\n{\n    padding: 20px;\n    background-color: var(--middle-background);\n    display: none;\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n}\n\n.matrix-table\n{\n    border-collapse: collapse;\n    table-layout: fixed;\n    border: 2px solid var(--header-background);\n}\n\n.matrix-table input\n{\n    font-size: 12px;\n}\n\n.matrix-table th\n{\n    border: 2px solid var(--header-background);\n    color: white;\n    background-color: var(--header-background);\n    font-size: 12px;\n    margin: 0;\n    padding: 0;\n    height: 1.5em;\n}\n\n.matrix-table td\n{\n    margin: 0;\n    padding: 0;\n}\n\n.matrix-table input[type='number']\n{\n    width: 1.2em;\n    height: 1.2em;\n    text-align: center;\n}\n\n.td-div\n{\n    display: flex;\n}\n\n/* coloring for matrix cells */\n.dark\n{\n    background-color: var(--darker-background);\n    border: 2px solid var(--darker-background);\n}\n\n.light {\n    background-color: var(--light-background);\n    border: 2px solid var(--light-background);\n}\n\n.green\n{\n    background-color: green;\n    font-weight: bold;\n    color: white;\n    border: 2px solid green;\n}\n\n.sub-member-input-div, .sub-text-assignments-div\n{\n    padding: 20px;\n}\n\n/* Member Input Styling*/\n.member-input\n{\n    display: flex;\n    gap: 40px;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n}\n\n.member-input-div\n{\n    background-color: var(--middle-background);\n    width: 100%;\n}\n\n.member-info-input\n{\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n}\n\ninput[type=\"checkbox\"]:checked {\n    accent-color: var(--header-background);\n}\n\n/* war size/buttons styling */\n.war-size-input\n{\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    align-self: start;\n}\n\n#war-size-dropdown\n{\n    padding: 10px;\n    font-size: 16px;\n    font-weight: bold;\n    text-align: center;\n    border: 2px solid black;\n    background-color: var(--darker-background);\n    border-radius: 5px;\n}\n\n#war-size-dropdown option\n{\n    padding: 0px;\n}\n\n.member-input-buttons\n{\n    align-self: start;\n    display: flex;\n    gap: 10px;\n    flex-direction: column;\n    align-items: center;\n}\n\n#total-stars\n{\n    min-width: 100%;\n    width: 0;\n}\n\n/* Individual capabilities styling */\n.member-capability-popup\n{\n    display: none;\n    flex-direction: column;\n    align-items: center;\n}\n/* table layout styling */\n.standard-table\n{\n    padding: 10px;\n    border-collapse: collapse;\n    border: 2px solid var(--header-background);\n}\n\n.standard-table td\n{\n    padding: 5px 3px;\n}\n\n.standard-table .hidden-td \n{\n    padding: 0px;\n}\n\n.standard-table th\n{\n    font-size: 16px;\n    padding: 8px 5px;\n}\n\n/* set size of input fields */\n.standard-table input\n{\n    font-size: 16px;\n    text-align: center;\n}\n\n.member-info-input .th\n{\n    width: 2em;\n}\n\n.name-input\n{\n    width: 6em;\n}\n\n/* right and left padding for each row */\ntd.first-td\n{\n    padding-left: 8px;\n    padding-right: 8px;\n}\n\n\n.last-td\n{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.standard-table .last-th \n{\n    padding-right: 10px;\n    padding-left: 10px;\n}\n\n\n.first-td\n{\n    margin-left: 5px;\n    margin-right: 5px;\n    border: none;\n    text-align: center;\n    width: 2em;\n}\n\n/* shading of rows */\n.odd-row th\n{\n    background-color: var(--header-background);\n    color: white;\n}\n\n.odd-row td, .odd-row .pos, .odd-row input\n{\n    background-color: var(--light-background);\n    border: none;\n}\n\n.odd-row button\n{\n    background-color: var(--light-background);\n    border: 2px solid var(--light-background);\n}\n\n.even-row td, .even-row .pos, .even-row input\n{\n    background-color: var(--darker-background);\n    border: none;\n}\n\n.even-row button\n{\n    background-color: var(--darker-background);\n    border: 2px solid var(--darker-background);\n}\n\n.header-row .cap-assignment-header\n{\n    padding-left: 5px;\n    padding-right: 5px;\n}\n\n.assignment-td input\n{\n    font-weight: bold;\n    text-align: center;\n}\n\n/* general input styling */\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n"],sourceRoot:""}]);const l=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,i){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var l=0;l<this.length;l++){var A=this[l][0];null!=A&&(o[A]=!0)}for(var d=0;d<n.length;d++){var s=[].concat(n[d]);r&&o[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),a&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=a):s[4]="".concat(a)),e.push(s))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},o=[],l=0;l<n.length;l++){var A=n[l],d=r.base?A[0]+r.base:A[0],s=i[d]||0,u="".concat(d," ").concat(s);i[d]=s+1;var c=t(u),p={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==c)e[c].references++,e[c].updater(p);else{var g=a(p,r);r.byIndex=l,e.splice(l,0,{identifier:u,updater:g,references:1})}o.push(u)}return o}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var l=t(i[o]);e[l].references--}for(var A=r(n,a),d=0;d<i.length;d++){var s=t(i[d]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}i=A}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{const n=(()=>{let n=[],e=[],t=[],r=[],a=[],i=[],o=[];const l=()=>{let a=Number.MAX_SAFE_INTEGER;for(let r=0;r<n.length;r++)0!=t[r]&&(a=Math.min(a,t[r])),0!=e[r]&&(a=Math.min(a,e[r]));for(let i=0;i<n.length;i++)for(let l=0;l<n.length;l++)if(0==n[i][l]&&0==r[i][l]&&(t[i]==a||e[l]==a)){r[i][l]|=1,t[i]=0,e[l]=0,o[i]=l;for(let a=0;a<n.length;a++)0==n[a][l]&&0==r[a][l]&&(r[a][l]|=2,t[a]--),0==n[i][a]&&0==r[i][a]&&(r[i][a]|=2,e[a]--);return}},A=()=>{for(let e=0;e<n.length;e++)-1===o[e]&&(a[e]=!0)},d=()=>{let e=!1;for(let t=0;t<n.length;t++)if(!i[t])for(let r=0;r<n.length;r++)if(0===n[r][t]&&a[r]){i[t]=!0,e=!0;break}for(let t=0;t<n.length;t++)a[t]||i[o[t]]&&(a[t]=!0,e=!0);return e},s=()=>{let e=Number.MAX_SAFE_INTEGER;for(let t=0;t<n.length;t++)for(let r=0;r<n.length;r++)a[t]||i[r]||(e=Math.min(e,n[t][r]));for(let t=0;t<n.length;t++)for(let r=0;r<n.length;r++)a[t]||i[r]?a[t]&&i[r]&&(n[t][r]+=e):n[t][r]-=e},u=(e,t)=>{let r=t?n[e][0]:n[0][e];for(let a=0;a<n.length;a++)r=Math.min(t?n[e][a]:n[a][e],r);return r},c=()=>{for(let r=0;r<n.length;r++)for(let a=0;a<n.length;a++)0==n[r][a]&&(t[r]++,e[a]++)},p=n=>{let e=0;for(let t=0;t<n.length;t++)e+=n[t];return e},g=()=>{let e=0;for(let t=0;t<n.length;t++)-1!=o[t]&&e++;return e},b=()=>{for(let e=0;e<n.length;e++)a[e]=!a[e]},m=()=>{let l=n.length;e=Array(l).fill(0),t=Array(l).fill(0),r=Array(l).fill().map((()=>Array(l).fill(0))),a=Array(l).fill(!1),i=Array(l).fill(!1),o=Array(l).fill(-1)};return{initialize:l=>{let A=l.length;n=l,e=Array(A).fill(0),t=Array(A).fill(0),r=Array(A).fill().map((()=>Array(A).fill(0))),a=Array(A).fill(!1),i=Array(A).fill(!1),o=Array(A).fill(-1)},makeAssignments:()=>{for((()=>{for(let e=0;e<n.length;e++){let t=u(e,!0);for(let r=0;r<n.length;r++)n[e][r]-=t}for(let e=0;e<n.length;e++){let t=u(e,!1);for(let r=0;r<n.length;r++)n[r][e]-=t}})(),c();0!=p(t);)l();for(;g()!=n.length;){A();let n=!0;for(;n;)n=d();for(b(),s(),m(),c();0!=p(t);)l()}},getAssignments:()=>o}})(),e=(()=>{let n=[3,3,3,3,3,3,3,3],e=[2,3,3,3,3,3,3,3],t=[2,3,3,3,3,3,3,3],r=[2,2,3,3,3,3,3,3],a=[2,2,3,3,3,3,3,3],i=[1,2,2,3,3,3,3,3],o=[1,2,2,3,3,3,3,3],l=[1,1,2,2,3,3,3,3],A=[1,1,2,2,3,3,3,3],d=[0,1,1,2,2,3,3,3];const s=s=>{switch(s){case"15+":return u(n);case"15-":return u(e);case"14+":return u(t);case"14-":return u(r);case"13+":return u(a);case"13-":return u(i);case"12+":return u(o);case"12-":return u(l);case"11+":return u(A);case"11-":return u(d);default:return[0,0,0,0,0,0,0,0]}},u=n=>n.map((n=>n));return{getArray:s,changeArray:(n,e,t)=>{s(n)[e]=t}}})();function r(n,t,r){this.name=n,this.memberTH=t,this.opponentTH=r,this.capabilities=e.getArray(t),this.target=null,this.stars=null}r.prototype.editCapability=function(n,e){this.capabilities[15-Number(n)]=e},r.prototype.resetCapability=function(){this.capabilities=e.getArray(this.memberTH)},r.prototype.assign=function(n,e){this.target=n,this.stars=e},r.prototype.unassign=function(){this.target=null,this.stars=null};const a=(()=>{let n=[];const e=(e,t)=>{n.splice(e,0,t)};return{addMember:(t,r)=>{r>n.length?n.push(t):e(r-1,t)},getLineup:()=>n,reset:()=>{n=[]},removeMember:e=>{n.splice(e,1)},replaceMember:(e,t)=>{n[t]=e},insertAtIndex:e}})(),i=(()=>{let n=null,e=null,t=a.getLineup(),r=[],i=[];const o=(t,o)=>{let A=e[t][o],d=a.getLineup();if(i[o])for(let n=0;n<r.length;n++)if(r[n]&&d[n].target==o){l(n);break}d[t].assign(o,A),r[t]=!0,i[o]=!0;for(let e=0;e<n.length;e++)n[e][o]=-1,n[t][e]=-1;n[t][o]=A,e[t][o]=A},l=t=>{let o=a.getLineup()[t],l=o.target;r[t]=!1,i[l]=!1;for(let a=0;a<n.length;a++)r[a]||(n[a][l]=e[a][l]),i[a]||(n[t][a]=e[t][a]);o.unassign()},A=n=>15-n;return{generate:()=>{t=a.getLineup();let l=t.length;n=Array(l).fill().map((()=>Array(l).fill(0))),e=Array(l).fill().map((()=>Array(l).fill(0))),r=Array(l).fill(!1),i=Array(l).fill(!1);for(let r=0;r<l;r++)for(let a=0;a<l;a++){let i=A(t[a].opponentTH);n[r][a]=t[r].capabilities[i],e[r][a]=t[r].capabilities[i]}for(let n=0;n<l;n++){let e=t[n].target;null!=e&&o(n,e,t[n].stars)}return n},getMatrix:()=>n,setMatrix:(t,r,a)=>(n[t][r]=a,-1!=a&&(e[t][r]=a),n),getMatrixToMaximize:()=>{let e=t.length,r=Array(e).fill().map((()=>Array(e).fill(0)));for(let t=0;t<e;t++)for(let a=0;a<e;a++)r[t][a]=-1*n[t][a]+3;return r},regenerateForMember:r=>{t=a.getLineup();let i=t.length;for(let a=0;a<i;a++){let i=A(t[a].opponentTH);n[r][a]=-1!=n[r][a]?t[r].capabilities[i]:-1,e[r][a]=t[r].capabilities[i]}},assignBase:o,unassignBase:l}})(),o={getStorage:()=>{let n=localStorage.getItem("lineup");if(null!=n){let e=JSON.parse(n);for(let n=0;n<e.length;n++){let t=e[n];if(null!=t){let e=new r(t.name,t.memberTH,t.opponentTH);e.capabilities=t.capabilities,e.target=t.target,e.stars=t.stars,a.addMember(e,n+1)}}}else(()=>{let n=new r("Kam","15-",15),e=new r("You","15-",15),t=new r("Sim","15-",15),i=new r("Womps","15-",15),o=new r("Oscar","14-",14),l=new r("Park","13-",13),A=new r("Jose","14-",14),d=new r("Miller","13-",13),s=new r("Vik","13+",13),u=new r("Hydro","13+",13),c=new r("YouToo","13+",13),p=new r("Gorf","13-",13),g=new r("Aoja","13+",13),b=new r("Risk","13+",13),m=new r("H2","13+",13),h=new r("Skull","13+",13),f=new r("Thinking","13+",13),C=new r("Pink","13+",12),y=new r("Stephen","13-",12),B=new r("Wizard","13+",13),x=new r("Thunder","13-",12),I=new r("Kurz","13+",12),v=new r("Hokage","13-",13),k=new r("Rob","12-",12),w=new r("Hulk","13-",12),E=new r("Rize","12-",12),M=new r("Star","12-",12),S=new r("Jason","12-",12),L=new r("Bade","12-",12),T=new r("Princess","12-",12);a.addMember(n,1),a.addMember(e,2),a.addMember(t,3),a.addMember(i,4),a.addMember(o,5),a.addMember(l,6),a.addMember(A,7),a.addMember(d,8),a.addMember(s,9),a.addMember(u,10),a.addMember(c,11),a.addMember(p,12),a.addMember(g,13),a.addMember(b,14),a.addMember(m,15),a.addMember(h,16),a.addMember(f,17),a.addMember(C,18),a.addMember(y,19),a.addMember(B,20),a.addMember(x,21),a.addMember(I,22),a.addMember(v,23),a.addMember(k,24),a.addMember(w,25),a.addMember(E,26),a.addMember(M,27),a.addMember(S,28),a.addMember(L,29),a.addMember(T,30)})();let e=localStorage.getItem("matrix");if(null!=e){let n=JSON.parse(e),t=i.generate();for(let e=0;e<Math.min(n.length,t.length);e++){let t=n[e];for(let r=0;r<n.length;r++){let n=Number(t[r]);i.setMatrix(e,r,n)}}}},setStorage:()=>{localStorage.setItem("lineup",JSON.stringify(a.getLineup())),null!=i.getMatrix()&&localStorage.setItem("matrix",JSON.stringify(i.getMatrix()))}},l=(()=>{const e=document.querySelector("body"),t=()=>{let n=document.querySelector(".member-input");b("member-info-input",n);let e=b("member-input-buttons",n);b("war-size-input",e),l(),m("button","","Assign",e,"big-button","member-input-submit").setAttribute("type","submit");let t=m("button","view-matrix-button","View Matrix",e,"big-button");t.setAttribute("type","button"),t.style.display="none",t.addEventListener("click",(()=>{f()}));let r=m("button","copy-button","Copy",e,"big-button");r.setAttribute("type","button"),r.style.display="none",r.addEventListener("click",(()=>{navigator.clipboard.writeText(p()),r.textContent="Copied!"}));let o=m("button","reset-button","Reset",e,"big-button");o.setAttribute("type","button"),o.addEventListener("click",(()=>{let n=a.getLineup();for(let e=0;e<n.length;e++)i.unassignBase(e),i.generate();v()&&I()})),m("div","total-stars","",e,"title"),A(),n.addEventListener("submit",(n=>{n.preventDefault();let e=document.querySelector("#war-size-dropdown"),t=e.options[e.selectedIndex].value,r=a.getLineup();for(;t<r.length;)a.removeMember(t);i.generate(),c(),u()}))},l=()=>{let n=document.querySelector(".war-size-input");n.innerHTML="",b("title",n).textContent="War Size";let e=m("select","war-size-dropdown","",n);m("option","",30,e).setAttribute("value",30),m("option","",15,e).setAttribute("value",15),e.addEventListener("change",(()=>{A()}))},A=()=>{let n=document.querySelector(".member-info-input");n.innerHTML="",b("title",n).textContent="Members";let e=m("table","","",n,"standard-table"),t=m("tr","","",e,"odd-row","header-row");m("th","","Pos",t),m("th","","Name",t),m("th","target-header","",t,"assignment-header","hidden-td"),m("th","stars-header","",t,"assignment-header","hidden-td"),m("th","","TH",t),m("th","","Opp",t),m("th","","",t,"hidden-td"),t.appendChild(document.createElement("th")),t.appendChild(document.createElement("th"));let l=document.querySelector("#war-size-dropdown"),u=l.options[l.selectedIndex].value;for(let n=0;n<u;n++){let t=m("tr","row-"+n,"",e);n%2==0?t.classList.add("even-row"):t.classList.add("odd-row");let l=m("td","","",t),s=m("input","num-"+n,"",l,"pos","first-td");s.setAttribute("type","number"),s.setAttribute("required",!0),s.setAttribute("min",1),s.setAttribute("max",u),s.value=n+1,s.addEventListener("change",(()=>{if(""==s.value)s.value=n+1;else{let e=a.getLineup()[n];a.removeMember(n),a.addMember(e,Number(s.value)),s.value=n+1}A()}));let c=m("td","","",t),p=m("input","name-"+n,"",c,"name-input");p.setAttribute("type","text"),p.setAttribute("required",!0),p.addEventListener("change",(()=>{let e=a.getLineup()[n];if(null!=e){let t=e;t.name=p.value,a.replaceMember(t,n),o.setStorage()}})),m("td","target-"+n,"",t,"assignment-td","hidden-td"),m("td","stars-"+n,"",t,"assignment-td","hidden-td");let b=m("td","","",t),h=m("input","th-"+n,"",b,"th");h.setAttribute("type","text"),h.setAttribute("required",!0),h.setAttribute("pattern","1([1-5])([+]|-)"),h.addEventListener("change",(()=>{let e=a.getLineup()[n];if(null==e){let e=new r(p.value,h.value,y.value);a.replaceMember(e,n)}else e.memberTH=h.value,e.resetCapability(),a.replaceMember(e,n);v()&&(i.regenerateForMember(n),I()),o.setStorage()}));let f=m("td","","",t),y=m("input","oppTh-"+n,"",f);y.setAttribute("type","number"),y.setAttribute("required",!0),y.setAttribute("min",8),y.setAttribute("max",15),y.addEventListener("change",(()=>{let e=a.getLineup()[n];if(null!=e){let t=e;t.opponentTH=y.value,a.replaceMember(t,n),o.setStorage()}v()&&(i.generate(),I())})),m("td","check-td-"+n,"",t,"hidden-td");let B=m("td","","",t),k=m("button","","Edit",B,"small-button");k.setAttribute("type","button"),k.addEventListener("click",(()=>{null!=a.getLineup()[n]&&(g(n),C())}));let w=m("td","","",t),E=m("div","","",w,"svg","delete","last-td");E.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><title>trash-can-outline</title><path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" /></svg>',E.addEventListener("click",(()=>{a.removeMember(n),a.addMember(null,u),o.setStorage(),A()})),h.addEventListener("input",(()=>{d(h.id,"Please enter a TH level followed by +/- (ex. 15+)")})),h.addEventListener("change",(()=>{d(h.id,"Please enter a TH level followed by +/- (ex. 15+)")})),x()}s()},d=(n,e)=>{let t=document.getElementById(n);t.validity.patternMismatch?t.setCustomValidity(e):t.setCustomValidity("")},s=()=>{let n=a.getLineup(),e=document.querySelector("#war-size-dropdown"),t=e.options[e.selectedIndex].value;for(let e=0;e<Math.min(n.length,t);e++){let t=n[e];document.getElementById("name-"+e).value=null==t?"":t.name,document.getElementById("th-"+e).value=null==t?"":t.memberTH,document.getElementById("oppTh-"+e).value=null==t?"":t.opponentTH}},u=()=>{const e=document.querySelector(".assignments");e.innerHTML="",n.initialize(i.getMatrixToMaximize()),n.makeAssignments();const t=n.getAssignments(),r=i.getMatrix();let l=r.length,A=[],d=[],s=[],p=[];m("div","","Assignments",e,"popup-title","title");let g=m("table","","",e,"matrix-table"),f=m("tr","","",g);m("th","","",f);for(let n=0;n<l;n++)A[n]=m("th","matrix-opp-"+n,n+1,f);m("th","","",f);for(let n=0;n<l;n++){let e=m("tr","","",g);s[n]=m("th","",a.getLineup()[n].name,e);let o=t[n];for(let t=0;t<l;t++){let a=m("td","","",e),l=b("td-div",a),g=m("input","matrix-"+n+"-"+t,"",l);g.setAttribute("type","number"),g.value=r[n][t],o===t&&g.classList.add("green"),(n+t)%2==0?g.classList.add("light"):g.classList.add("dark"),-1==g.value&&(g.value="0",g.disabled=!0),l.addEventListener("mouseover",(()=>{s[n].style.opacity="0.7",A[t].style.opacity="0.7",p[n].style.opacity="0.7",d[t].style.opacity="0.7"})),l.addEventListener("mouseout",(()=>{s[n].style.opacity="1",A[t].style.opacity="1",p[n].style.opacity="1",d[t].style.opacity="1"})),g.addEventListener("change",(()=>{i.setMatrix(n,t,g.value),u(),c()}))}p[n]=m("th","",a.getLineup()[n].name,e)}let C=m("tr","","",g);m("th","","",C);for(let n=0;n<l;n++)d[n]=m("th","matrix-opp-2-"+n,n+1,C);m("th","","",C);let y=b("buttons",e);h(y,"Close"),o.setStorage()},c=()=>{n.initialize(i.getMatrixToMaximize()),n.makeAssignments();const e=n.getAssignments(),t=i.getMatrix();let r=a.getLineup(),l=document.querySelector("#target-header");l.textContent="Target",l.classList.remove("hidden-td");let A=document.querySelector("#stars-header");A.textContent="Stars",A.classList.remove("hidden-td");let d=0;for(let n=0;n<e.length;n++){let a=e[n],o=document.querySelector("#target-"+n);o.innerHTML="";let l=m("input","target-input-"+n,"",o);l.setAttribute("type","number"),l.setAttribute("min",1),l.setAttribute("max",30),l.value=Number(a+1),o.classList.remove("hidden-td");let A=document.querySelector("#stars-"+n);A.innerHTML="";let s=m("input","stars-input-"+n,"",A);s.setAttribute("type","number"),s.setAttribute("min",1),s.setAttribute("max",3),s.value=Number(t[n][a]),A.classList.remove("hidden-td"),l.addEventListener("change",(()=>{i.unassignBase(n),i.getMatrix();let e=l.value-1;i.assignBase(n,e),I()})),s.addEventListener("change",(()=>{i.setMatrix(n,a,s.value),I()}));let u=document.querySelector("#check-td-"+n);u.innerHTML="";let c=m("input","assigned-"+n,"",u);c.setAttribute("type","checkbox"),c.checked=null!=r[n].target,c.addEventListener("change",(()=>{c.checked?(i.assignBase(n,Number(l.value)-1),I()):(i.unassignBase(n),I())})),u.classList.remove("hidden-td"),d+=Number(t[n][a])}o.setStorage(),B(d)},p=()=>{let e=a.getLineup(),t="";n.initialize(i.getMatrixToMaximize()),n.makeAssignments();const r=n.getAssignments(),o=i.getMatrix();let l=0;for(let n=0;n<e.length;n++){let a=e[n].name,i=r[n],A=o[n][i];t+=a+": "+(i+1)+" ("+A+" stars)\n",l+=Number(A)}return t+="Total stars: "+l,t},g=n=>{let e=document.querySelector(".member-capability-popup");e.innerHTML="";let t=a.getLineup()[n],r=(m("div","",t.name,e,"popup-title","title"),m("table","","",e,"standard-table")),o=m("tr","","",r,"odd-row");m("th","","TH",o,"cap-assignment-header"),m("th","","Stars",o,"last-th","cap-assignment-header");for(let e=15;e>=8;e--){let a=m("tr","","",r);e%2==1?a.classList.add("even-row"):a.classList.add("odd-row"),m("td","",e,a,"first-td");let o=m("td","","",a,"last-td"),l=m("input","","",o);l.setAttribute("type","number"),l.setAttribute("min",0),l.setAttribute("max",3),l.value=t.capabilities[15-e],l.addEventListener("change",(()=>{t.editCapability(e,l.value),v()&&(i.regenerateForMember(n),I(),C())}))}let l=m("div","","",e,"buttons");h(l,"Close"),m("button","","Reset",l,"big-button","popup-button").addEventListener("click",(()=>{t.resetCapability(),g(n),v()&&(i.regenerateForMember(n),I(),C())}))},b=(n,e)=>{let t=document.createElement("div");return t.classList.add(n),e.appendChild(t),t},m=(n,e,t,r,...a)=>{let i=document.createElement(n);i.id=e,i.textContent=t,r.appendChild(i);for(let n=0;n<a.length;n++)i.classList.add(a[n]);return i},h=(n,e)=>{m("button","",e,n,"big-button","popup-button").addEventListener("click",(()=>{y()}))},f=()=>{document.querySelector(".assignments").style.display="flex",document.querySelector(".member-input-div").style.display="none",document.querySelector(".member-capability-popup").style.display="none",x()},C=()=>{document.querySelector(".assignments").style.display="none",document.querySelector(".member-input-div").style.display="none",document.querySelector(".member-capability-popup").style.display="flex",x()},y=()=>{if(document.querySelector(".assignments").style.display="none",document.querySelector(".member-input-div").style.display="block",document.querySelector(".member-capability-popup").style.display="none",v()){let n=document.querySelector("#total-stars").textContent;B(n.substring(13))}else x()},B=n=>{document.querySelector("#view-matrix-button").style.display="inline-block";let e=document.querySelector("#copy-button");e.style.display="inline-block",e.textContent="Copy",document.querySelector("#total-stars").textContent="Total Stars: "+n,document.querySelector("#total-stars").style.display="block"},x=()=>{document.querySelector("#view-matrix-button").style.display="none",document.querySelector("#copy-button").style.display="none",document.querySelector("#total-stars").style.display="none"},I=()=>{c(),u()},v=()=>!document.querySelector("#target-1").classList.contains("hidden-td");return{buildLayout:()=>{o.getStorage(),b("header",e).textContent="CWL Assignments";let n=b("main",e);b("member-input-div",n),m("div","","",n,"assignments","popup"),m("div","","",n,"member-capability-popup","popup"),(()=>{let n=document.querySelector(".member-input-div"),e=b("sub-member-input-div",n);m("form","","",e,"member-input"),t()})()}}})();var A=t(379),d=t.n(A),s=t(795),u=t.n(s),c=t(569),p=t.n(c),g=t(565),b=t.n(g),m=t(216),h=t.n(m),f=t(589),C=t.n(f),y=t(28),B={};B.styleTagTransform=C(),B.setAttributes=b(),B.insert=p().bind(null,"head"),B.domAPI=u(),B.insertStyleElement=h(),d()(y.Z,B),y.Z&&y.Z.locals&&y.Z.locals,l.buildLayout()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,